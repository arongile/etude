;; -*- mode: emacs-lisp; eval: (progn (pp-buffer) (indent-buffer)) -*-
((def-persp nil
   ((def-buffer "magit: .emacs.d" nil magit-status-mode)
    (def-buffer "etude-core-code.el" "/root/.emacs.d/etude/core/etude-core-code.el" emacs-lisp-mode)
    (def-buffer "etude-module-native.el" "/root/.emacs.d/etude/module/etude-module-native.el" emacs-lisp-mode)
    (def-buffer "etude-module-text.el" "/root/.emacs.d/etude/module/etude-module-text.el" emacs-lisp-mode)
    (def-buffer "etude-core-os.el" "/root/.emacs.d/etude/core/etude-core-os.el" emacs-lisp-mode)
    (def-buffer "etude-core-management.el" "/root/.emacs.d/etude/core/etude-core-management.el" emacs-lisp-mode)
    (def-buffer "etude-core-workflow.el" "/root/.emacs.d/etude/core/etude-core-workflow.el" emacs-lisp-mode)
    (def-buffer "hara_code.clj" "/root/dev/hara/misc/documentation/hara/hara_code.clj" clojure-mode)
    (def-buffer "hara_core_version.clj" "/root/dev/hara/misc/documentation/hara/hara_core_version.clj" clojure-mode)
    (def-buffer "EXTERNAL.md" "/root/dev/hara/EXTERNAL.md" markdown-mode)
    (def-buffer "CHANGELOG.md" "/root/dev/hara/CHANGELOG.md" markdown-mode)
    (def-buffer ".gitlab-ci.yml" "/root/dev/hara/.gitlab-ci.yml" yaml-mode)
    (def-buffer "project.clj" "/root/dev/hara/project.clj" clojure-mode)
    (def-buffer ".travis.yml" "/root/dev/hara/.travis.yml" yaml-mode)
    (def-buffer "init.el" "/root/.emacs.d/init.el" emacs-lisp-mode)
    (def-buffer "etude-module-lisp.el" "/root/.emacs.d/etude/module/etude-module-lisp.el" emacs-lisp-mode)
    (def-buffer "etude-module-jvm.el" "/root/.emacs.d/etude/module/etude-module-jvm.el" emacs-lisp-mode)
    (def-buffer "magit-diff: .emacs.d" nil magit-diff-mode)
    (def-buffer "service.clj" "/root/dev/hara/src/code/deploy/service.clj" clojure-mode)
    (def-buffer "sh-01" nil shell-mode)
    (def-buffer "magit-process: .emacs.d" nil magit-process-mode))
   (def-wconf
     (((min-height . 4)
       (min-width . 20)
       (min-height-ignore . 2)
       (min-width-ignore . 6)
       (min-height-safe . 1)
       (min-width-safe . 4)
       (min-pixel-height . 4)
       (min-pixel-width . 20)
       (min-pixel-height-ignore . 2)
       (min-pixel-width-ignore . 6)
       (min-pixel-height-safe . 1)
       (min-pixel-width-safe . 4))
      hc
      (pixel-width . 163)
      (pixel-height . 48)
      (total-width . 163)
      (total-height . 48)
      (normal-height . 1.0)
      (normal-width . 1.0)
      (combination-limit . t)
      (leaf
       (pixel-width . 81)
       (pixel-height . 48)
       (total-width . 81)
       (total-height . 48)
       (normal-height . 1.0)
       (normal-width . 0.5)
       (buffer "magit: .emacs.d"
               (selected . t)
               (hscroll . 0)
               (fringes 0 0 nil nil)
               (margins 1)
               (scroll-bars nil 0 t nil 0 t nil)
               (vscroll . 0)
               (dedicated)
               (point . 1)
               (start . 1))
       (prev-buffers
        ("magit: .emacs.d" 1 1)
        ("*Packages*" 470640 474861)
        ("*Warnings*" 1 86)
        ("etude-core-management.el" 709 1513)
        ("etude-core-workflow.el" 2116 2505)
        ("*scratch*" 1 171)
        ("hara_code.clj" 1 339)
        ("hara_core_version.clj" 1 377)
        ("EXTERNAL.md" 157 718)
        ("*Compile-Log*" 1 1)))
      (leaf
       (last . t)
       (pixel-width . 82)
       (pixel-height . 48)
       (total-width . 82)
       (total-height . 48)
       (normal-height . 1.0)
       (normal-width . 0.5)
       (buffer "etude-core-code.el"
               (selected)
               (hscroll . 0)
               (fringes 0 0 nil nil)
               (margins 1)
               (scroll-bars nil 0 t nil 0 t nil)
               (vscroll . 0)
               (dedicated)
               (point . 816)
               (start . 1))
       (prev-buffers
        ("magit-diff: .emacs.d" 1 1)
        ("etude-core-code.el" 1 816)
        ("etude-module-native.el" 703 950)
        ("etude-module-text.el" 1 357)
        ("etude-core-os.el" 1 177)
        ("*eshell*<2>" 13687 14686)
        ("*eshell*" 4680 7199)
        ("etude-core-management.el" 1012 1549)
        ("etude-core-workflow.el" 2116 2505)
        ("*Help*" 1 770)))))
   (def-params nil)
   t nil nil))
