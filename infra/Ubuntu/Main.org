#+AUTHOR:  Chris Zheng
#+EMAIL:   z@caudate.me
#+TITLE:  Ubuntu 20.04.1 Setup
#+OPTIONS: toc:nil
#+STARTUP: showall

*  Introduction

This will setup an installation of Emacs with Etude on a brand new
Ubuntu 20.04 system with some generally useful packages for
development.

** Emacs

Emacs 27 is a good version to be on.

#+BEGIN_SRC bash :results output silent :cache yes :tangle build/setup.sh
echo "Installing Apt Toolings"
apt-get update
apt-get install -y apt-utils software-properties-common git make curl wget gpg

echo "Installing Emacs 27.1"
add-apt-repository ppa:kelleyk/emacs
apt-get update
apt-get install -y emacs27-nox
#+END_SRC

** Runtimes

These are various runtimes that are handy to have around.

#+BEGIN_SRC bash :async :results output :cache no :tangle build/setup.sh
echo "Installing Docker"
apt-get install -y docker.io
#+END_SRC

#+BEGIN_SRC bash :async :results output :cache no :tangle build/setup.sh
echo "Installing Nodejs"
apt-get install -y nodejs
#+END_SRC

#+BEGIN_SRC bash :async :results output :cache no :tangle build/setup.sh
echo "Installing Python3"
apt-get install -y python3
#+END_SRC

#+BEGIN_SRC bash :async :results output :cache no :tangle build/setup.sh
echo "Installing Lua"
apt-get install -y luarocks
#+END_SRC

#+BEGIN_SRC bash :async :results output :cache no :tangle build/setup.sh
echo "Installing Go"
apt-get install -y golang 
#+END_SRC

#+BEGIN_SRC bash :async :results output :cache no :tangle build/setup.sh
echo "Installing Openjdk"
apt-get install -y openjdk-11-jdk
#+END_SRC

** General Utils

~browsh~
[[https://www.brow.sh/docs/mosh/][Browsh]]
#+BEGIN_SRC bash :async :results output silent :cache no :tangle build/setup.sh
echo "Installing Browsh"
wget https://github.com/browsh-org/browsh/releases/download/v1.6.4/browsh_1.6.4_linux_amd64.deb
apt-get install ./browsh_1.6.4_linux_amd64.deb
rm ./browsh_1.6.4_linux_amd64.deb
#+END_SRC

~fzf~
[[https://github.com/junegunn/fzf][GitHub - junegunn/fzf]]
#+BEGIN_SRC bash :async :results output silent :cache no :tangle build/setup.sh
echo "Installing fzf"
apt-get install -y fzf
#+END_SRC

~ripgrep~
[[https://github.com/BurntSushi/ripgrep][GitHub - BurntSushi/ripgrep]]
#+BEGIN_SRC bash :async :results output silent :cache no :tangle build/setup.sh
echo "Installing Ripgrep"
apt-get install ripgrep
#+END_SRC

~mosh~
[[https://github.com/mobile-shell/mosh][Mosh Shell]]
#+BEGIN_SRC bash :async :results output silent :cache no :eval no :tangle build/setup.sh
echo "Installing Mosh"
git clone https://github.com/mobile-shell/mosh
cd mosh
apt-get -y install automake libtool g++ protobuf-compiler \
  libprotobuf-dev libboost-dev libutempter-dev libncurses5-dev \
  zlib1g-dev libio-pty-perl libssl-dev pkg-config
./autogen.sh
./configure
make
make install
cd ..
#+END_SRC

~oh-my-bash~
[[https://github.com/ohmybash/oh-my-bash][GitHub - ohmybash/oh-my-bash]]
#+BEGIN_SRC bash :async :results output silent :cache no :tangle build/setup.sh
echo "Installing Oh my Bash"
bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)"
#+END_SRC

~lazydocker~
[[https://github.com/jesseduffield/lazydocker][GitHub - jesseduffield/lazydocker]]
#+BEGIN_SRC bash :async :results output silent :cache no :tangle build/setup.sh
echo "Installing Lazydocker"
go get github.com/jesseduffield/lazydocker
#+END_SRC

* Tangle

Usually, tangling an org file is done via a shortcut key but it's a really important operation that can be extracted as a script.

~<build/tangle>~
#+BEGIN_SRC bash :results output silent :cache no :eval yes :tangle build/tangle
#!/bin/sh
# Tangle files with Org mode
#
emacs -Q --batch --eval "
    (progn
      (require 'ob-tangle)
      (dolist (file command-line-args-left)
        (with-current-buffer (find-file-noselect file)
          (org-babel-tangle))))
  " "$@"
#+END_SRC

And move it somewhere on the $PATH

#+BEGIN_SRC bash :results output silent :cache no :eval yes
chmod +x build/tangle
mv tangle ~/bin
#+END_SRC

* Docker

This org file generates various files in a `Ubuntu` directory after tangle that can be run in order to build a container.

The previous code blocks are tangled together to produce a single setup script, used by a Dockerfile:

- ~build/setup.sh~

This section will outline three additional scripts used for container generation:

- ~<build/image_build.sh>~
- ~<build/Dockerfile>~
- ~<build/inception.sh>~

For containerization of the setup, We create a ~Dockerfile~ in the build directory.

~<build/Dockerfile>~
#+BEGIN_SRC dockerfile :results output silent :exports code :padline no :tangle build/Dockerfile 
FROM ubuntu:20.04
ARG DEBIAN_FRONTEND=noninteractive
WORKDIR /tmp
ADD tangle    /root/bin/tangle
RUN chmod +x  /root/bin/tangle
ADD setup.sh  /tmp/setup.sh
RUN cd /tmp && chmod +x ./setup.sh && ./setup.sh
RUN rm /tmp/setup.sh
ADD inception.sh /tmp/inception.sh
RUN chmod +x /tmp/inception.sh
RUN echo 'export PATH=$HOME/bin:$PATH' >> /root/.bashrc
RUN echo "-"
RUN git clone https://github.com/zcaudate/etude.git /root/.emacs.d
#+END_SRC

We also create a simple `image_build.sh` script.

~<build/image_build.sh>~
#+BEGIN_SRC bash :results output silent :cache no :eval yes :tangle build/image_build.sh
docker build . -t zcaudate/etude:0.0.1 | tee build.out
#+END_SRC

~<build/image_push.sh>~
#+BEGIN_SRC bash :results output silent :cache no :eval yes :tangle build/image_push.sh
docker push zcaudate/etude:0.0.1
#+END_SRC

*** Building

To untangle Ubuntu.org (this file)

#+NAME: Bootstrap
#+BEGIN_SRC bash :results output silent :cache no :eval yes
cd infra/Ubuntu
tangle.sh Ubuntu.org
#+END_SRC

To build a docker image, run

#+BEGIN_SRC bash :results output silent :cache no :eval yes
chmod +x build/image_build.sh
#+END_SRC

The image ~zcaudate/etude:0.0.1~ will be built. It can be run by calling:

#+BEGIN_SRC bash :results output silent :cache no :eval no
docker run --rm -it zcaudate/etude
..
<L1>$ emacs
#+END_SRC


** Inception

We now detail ~inception.sh~ script. This just goes through the ~tangle~ and ~build~ ceremony again, recreating build steps for the containerized instance. It is purely academic.

~<build/inception.sh>~
#+BEGIN_SRC bash :results output silent :cache no :eval yes :tangle build/inception.sh
cd /root/.emacs.d/infra/Ubuntu
rm -R build
mkdir build
tangle Main.org
chmod +x build/image_build.sh
#+END_SRC

#+BEGIN_SRC bash :results output silent :cache no :eval yes :tangle build/inception.sh
cd build && ./image_build.sh
#+END_SRC

We now can do emacs build inception:

#+BEGIN_SRC bash :results output silent :eval no
host$ docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock zcaudate/etude:0.0.1
..

<L1>$ ./inception.sh
<L1>$ docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock zcaudate/etude:0.0.1
..

<L2>$ ./inception.sh
<L2>$ docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock zcaudate/etude:0.0.1
..

#+END_SRC





